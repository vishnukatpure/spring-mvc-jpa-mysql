pipeline {
   agent any

   tools {
      // Install the Maven version configured as "M3" and add it to the path.
      maven "maven"
   }

   stages {
      stage('Clone'){
         steps {
            // Get some code from a GitHub repository
            git 'https://github.com/vishnukatpure/spring-mvc-jpa-mysql.git'
         }  
      }
      
      stage('SonarQube analysis') { 
         steps {
            // Run Maven on a Unix agent.
            withSonarQubeEnv(credentialsId: 'sonar-sec', installationName: 'sonar-qube') {
               sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar"
            }
            //To run Maven on a Windows agent, use
            //bat "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar"
         }        
      }
      
      stage('Build') { 
         steps {
            // Run Maven on a Unix agent.
            sh "mvn -DskipTests clean package"

            //To run Maven on a Windows agent, use
            //bat "mvn -DskipTests clean package"
         }        
      }
      stage('Test') { 
         steps {
            // Run Maven on a Unix agent.
            sh "mvn test"

            //To run Maven on a Windows agent, use
            //bat "mvn test"
         }        
      }
      
      stage('Deploy'){
      	steps {
      		//Deploy to specific remote server using manager credentials 
            deploy adapters: [tomcat8(credentialsId: '8afeb7c2-5908-48d2-ab75-d3f0507cb02f', path: '', 
               url: 'http://192.168.106.51:9999')], contextPath: 'spring-mvc-jpa-mysql', war: 'target/spring-mvc-jpa-mysql.war'   
      	}
      }
   }
}
  
